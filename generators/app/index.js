'use strict';
var path = require('path');
var fs = require('fs');
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');

var templatePath = path.join(path.dirname(require.resolve('react-my-template')), '..');

module.exports = yeoman.Base.extend({
  constructor: function () {
    yeoman.Base.apply(this, arguments);

    this.sourceRoot(templatePath);
  },

  prompting: function () {
    this.log(yosay(
      'Welcome to the superior ' + chalk.red('my-react') + ' generator!'
    ));

    var prompts = [
      {
        type: 'input',
        name: 'appName',
        message: 'Please choose your application name',
        default: 'my-react-app'
      }
    ];

    return this.prompt(prompts).then(function (props) {
      this.props = props;
    }.bind(this));
  },

  writing: function () {
    var defaultSettings = this.fs.readJSON(`${templatePath}/package.json`);
    var packageSettings = {
      name: this.props.appName,
      private: true,
      version: '0.0.1',
      description: `${this.props.appName} - Generated by generator-my-react`,
      main: 'src/index.js',
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: 'Your name here',
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };
    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);

    var excludeList = [
      'LICENSE',
      'CHANGELOG.md',
      'node_modules',
      'package.json',
      '.istanbul.yml',
      '.travis.yml'
    ];

    fs.readdir(this.sourceRoot(), (function (err, items) {
      for (var index in items) {
        var item = items[index];

        if (excludeList.indexOf(item) !== -1) {
          continue;
        }

        var fullPath = path.join(templatePath, item);
        if (fs.lstatSync(fullPath).isDirectory()) {
          this.bulkDirectory(item, item);
        } else {
          if (item === '.npmignore') {
            this.copy(item, '.gitignore');
          } else {
            this.copy(item, item);
          }
        }
      }
    }).bind(this));

  },

  install: function () {
    // this.installDependencies();
  }
});
